{"version":3,"sources":["components/auth/index.tsx","components/auth/PrivateRoute.tsx","Context/Context.tsx","components/BaseLayout/BaseLayout.tsx","components/BaseLayout/AuthForm.tsx","pages/SignIn/SignIn.tsx","pages/SignUp/SignUp.tsx","components/UserComponent/UserCard.tsx","components/UserComponent/RepoList.tsx","pages/Main.tsx","Routes/Routes.tsx","config/firebaseConfig.ts","serviceWorker.ts","index.tsx"],"names":["cookies","Cookies","setUsetInCocke","user","c","name","value","JSON","stringify","set","path","maxAge","location","reload","isAuthenticate","undefined","window","get","console","log","isSignOut","remove","PrivateRoute","Component","component","rest","render","props","to","pathname","state","from","userContext","createContext","Header","Layout","Content","Footer","BaseLayout","children","context","selectMenu","useContext","username","setUser","email","split","className","style","textTransform","margin","mode","float","background","Item","key","onClick","minHeight","padding","textAlign","onErrorMessage","e","notification","error","message","description","AuthForm","formName","onHandleChange","initialValues","remember","onFinish","rules","required","prefix","UserOutlined","placeholder","LockOutlined","type","valuePropName","noStyle","href","htmlType","SignIn","values","password","firebase","auth","signInWithEmailAndPassword","then","res","uid","success","catch","SignUp","createUserWithEmailAndPassword","Meta","Card","UserCard","hoverable","width","cover","alt","src","avatar_url","title","bio","RepoList","repoUrl","useState","repoList","setRepoList","fetchRepoList","reposUrl","a","Axios","data","useEffect","repos_url","size","bordered","dataSource","renderItem","item","i","Search","Input","Main","userData","setUserData","loading","setLoading","fetchUser","onSearch","enterButton","span","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Routes","Provider","exact","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2e2dd181.chunk.js","sourcesContent":["/* eslint-disable no-restricted-globals */\r\nimport React, { useEffect } from \"react\";\r\nimport Cookies from \"universal-cookie\";\r\nimport { Redirect } from \"react-router-dom\";\r\nconst cookies = new Cookies();\r\n\r\ninterface User {\r\n  email: string;\r\n  uid: string | undefined;\r\n}\r\n\r\nconst setCookie = (c: Cookies, name: string, value: any) => {\r\n  c.set(name, value, { path: \"/\", maxAge: 31536000 });\r\n};\r\n\r\nexport const setUsetInCocke = (user: User) => {\r\n  setCookie(cookies, \"user\", JSON.stringify(user));\r\n  location.reload();\r\n};\r\n\r\nexport const isAuthenticate = () => {\r\n  if (window !== undefined) {\r\n    const user = cookies.get(\"user\");\r\n    console.log(user);\r\n\r\n    return user;\r\n  }\r\n  return \"\";\r\n};\r\n\r\nexport const isSignOut = () => {\r\n  cookies.remove(\"user\");\r\n  location.reload();\r\n};\r\n","import React, { FC } from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { isAuthenticate } from \"./index\";\r\n\r\nconst PrivateRoute: FC<{ component: any; exact: boolean; path: string }> = ({ component: Component, ...rest }) => {\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        isAuthenticate() ? (\r\n          <Component {...props} />\r\n        ) : (\r\n          <Redirect\r\n            to={{\r\n              pathname: \"/signin\",\r\n              state: { from: props.location },\r\n            }}\r\n          />\r\n        )\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default PrivateRoute;\r\n","import { createContext } from \"react\";\r\n\r\nexport const userContext = createContext<Partial<any>>({});\r\n","import React, { FC, useContext } from \"react\";\r\nimport { Layout, Menu, Breadcrumb } from \"antd\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport { userContext } from \"../../Context/Context\";\r\nimport \"./BaseLayout.scss\";\r\nimport { isSignOut, isAuthenticate } from \"../auth\";\r\nimport { UserOutlined } from \"@ant-design/icons/lib/icons\";\r\nconst { Header, Content, Footer } = Layout;\r\n\r\nconst BaseLayout: FC<{ children: React.ReactNode; selectMenu?: string }> = ({ children, selectMenu }) => {\r\n  const context = useContext(userContext);\r\n  const { user, setUser } = context;\r\n  let username = user ? user.email.split(\"@\") : \"\";\r\n  return (\r\n    <div className='main-wrapper'>\r\n      <Layout className='layout'>\r\n        <Header className='header-wrapper'>\r\n          <div className='username'>\r\n            <div className='icon'>\r\n              <UserOutlined />\r\n            </div>\r\n            <h3 style={{ textTransform: \"capitalize\", margin: \"0\" }}>{username[0]}</h3>\r\n          </div>\r\n          {user ? (\r\n            <Menu mode='horizontal' style={{ float: \"right\", background: \"none\" }}>\r\n              <Menu.Item key='1'>\r\n                <Link to='/'>Home</Link>\r\n              </Menu.Item>\r\n              <Menu.Item key='4' onClick={isSignOut}>\r\n                SignOut\r\n              </Menu.Item>\r\n            </Menu>\r\n          ) : (\r\n            <Menu mode='horizontal' style={{ float: \"right\", background: \"none\" }}>\r\n              <Menu.Item key='2'>\r\n                <Link to='/signin'>SignIn</Link>\r\n              </Menu.Item>\r\n              <Menu.Item key='3'>\r\n                <Link to='/signup'>SignUp</Link>\r\n              </Menu.Item>\r\n            </Menu>\r\n          )}\r\n        </Header>\r\n        <Content style={{ minHeight: \"calc(100vh - 64px)\", padding: \"0 50px\" }}>{children}</Content>\r\n        <Footer style={{ textAlign: \"center\" }}>Ant Design ©2018 Created by Ant UED</Footer>\r\n      </Layout>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BaseLayout;\r\n","import React, { FC } from \"react\";\r\nimport { Form, Input, Button, Checkbox, notification } from \"antd\";\r\nimport { UserOutlined, LockOutlined } from \"@ant-design/icons\";\r\nimport { Store } from \"antd/lib/form/interface\";\r\n\r\ninterface AuthForm {\r\n  onHandleChange: (value: Store) => void;\r\n  formName: string;\r\n  value?: Store;\r\n}\r\n\r\nexport const onErrorMessage = (e: string) => {\r\n  notification.error({\r\n    message: \"Auth Error\",\r\n    description: e,\r\n  });\r\n};\r\nexport const onSuccessMessage = () => {\r\n  notification.success({\r\n    message: \"Login Successful\",\r\n  });\r\n};\r\nconst AuthForm: FC<AuthForm> = ({ formName, onHandleChange }) => {\r\n  return (\r\n    <div>\r\n      <h1 className='form-header'>{formName}</h1>\r\n      <Form name='normal_login' className='login-form box-shadow' initialValues={{ remember: true }} onFinish={onHandleChange}>\r\n        <Form.Item name='username' rules={[{ required: true, message: \"Please input your Username!\" }]}>\r\n          <Input prefix={<UserOutlined className='site-form-item-icon' />} placeholder='Username' />\r\n        </Form.Item>\r\n        <Form.Item name='password' rules={[{ required: true, message: \"Please input your Password!\" }]}>\r\n          <Input prefix={<LockOutlined className='site-form-item-icon' />} type='password' placeholder='Password' />\r\n        </Form.Item>\r\n        <Form.Item>\r\n          <Form.Item name='remember' valuePropName='checked' noStyle>\r\n            <Checkbox>Remember me</Checkbox>\r\n          </Form.Item>\r\n\r\n          <a className='login-form-forgot' href=''>\r\n            Forgot password\r\n          </a>\r\n        </Form.Item>\r\n\r\n        <Form.Item>\r\n          <Button type='primary' htmlType='submit' className='login-form-button'>\r\n            {formName}\r\n          </Button>\r\n          <br />\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AuthForm;\r\n","/* eslint-disable @typescript-eslint/no-unused-expressions */\r\nimport React, { FC, useState, useContext } from \"react\";\r\nimport { Form, Input, Button, Checkbox } from \"antd\";\r\nimport { UserOutlined, LockOutlined } from \"@ant-design/icons\";\r\nimport \"./SignIn.scss\";\r\nimport { Store } from \"antd/lib/form/interface\";\r\nimport { userContext } from \"../../Context/Context\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport BaseLayout from \"../../components/BaseLayout/BaseLayout\";\r\nimport { setUsetInCocke, isAuthenticate } from \"../../components/auth/index\";\r\nimport firebase from \"firebase/app\";\r\nimport AuthForm, { onErrorMessage, onSuccessMessage } from \"../../components/BaseLayout/AuthForm\";\r\n\r\nconst SignIn: FC = () => {\r\n  const user = isAuthenticate();\r\n  const onSignin = (values: Store) => {\r\n    const { username, password } = values;\r\n    firebase\r\n      .auth()\r\n      .signInWithEmailAndPassword(username, password)\r\n      .then((res) => {\r\n        setUsetInCocke({ email: username, uid: res.user?.uid });\r\n        onSuccessMessage();\r\n      })\r\n      .catch((e) => {\r\n        onErrorMessage(e.message);\r\n      });\r\n  };\r\n\r\n  if (isAuthenticate()) {\r\n    return <Redirect to='/' />;\r\n  }\r\n\r\n  return (\r\n    <BaseLayout selectMenu='2'>\r\n      <div className='signin-wrapper'>\r\n        <AuthForm formName='SignIn' onHandleChange={onSignin} />\r\n      </div>\r\n    </BaseLayout>\r\n  );\r\n};\r\n\r\nexport default SignIn;\r\n","/* eslint-disable @typescript-eslint/no-unused-expressions */\r\nimport React, { FC, useState, useContext } from \"react\";\r\nimport \"./SignUp.scss\";\r\nimport { Store } from \"antd/lib/form/interface\";\r\nimport { userContext } from \"../../Context/Context\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport BaseLayout from \"../../components/BaseLayout/BaseLayout\";\r\nimport firebase from \"firebase/app\";\r\nimport { setUsetInCocke } from \"../../components/auth\";\r\nimport AuthForm, { onErrorMessage } from \"../../components/BaseLayout/AuthForm\";\r\n\r\nconst SignUp: FC = () => {\r\n  const context = useContext(userContext);\r\n  const onSignUp = (values: Store) => {\r\n    const { username, password } = values;\r\n    firebase\r\n      .auth()\r\n      .createUserWithEmailAndPassword(username, password)\r\n      .then((res) => {\r\n        setUsetInCocke({ email: username, uid: res.user?.uid });\r\n      })\r\n      .catch((error) => {\r\n        onErrorMessage(error.message);\r\n      });\r\n  };\r\n  if (context.user?.uid) {\r\n    return <Redirect to='/' />;\r\n  }\r\n  return (\r\n    <BaseLayout selectMenu='3'>\r\n      <div className='signup-wrapper'>\r\n        <AuthForm formName='SignUp' onHandleChange={onSignUp} />\r\n      </div>\r\n    </BaseLayout>\r\n  );\r\n};\r\n\r\nexport default SignUp;\r\n","import React from \"react\";\r\n\r\nimport { Card } from \"antd\";\r\n\r\nconst { Meta } = Card;\r\n\r\nconst UserCard = ({ user }: any) => {\r\n  console.log(\"cared \" + JSON.stringify(user));\r\n\r\n  return (\r\n    <div>\r\n      <Card hoverable style={{ width: 300 }} cover={<img alt={user.name} src={user.avatar_url} />}>\r\n        <Meta title={user.name} description={user.bio} />\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserCard;\r\n","import React, { FC, useState, useEffect, ReactNode } from \"react\";\r\nimport { onErrorMessage } from \"../BaseLayout/AuthForm\";\r\nimport { List, Typography, Divider } from \"antd\";\r\nimport Axios from \"axios\";\r\n\r\nconst RepoList: FC<any> = ({ repoUrl }) => {\r\n  const [repoList, setRepoList] = useState<any>([]);\r\n  const fetchRepoList = async (reposUrl: string) => {\r\n    try {\r\n      const { data } = await Axios.get(reposUrl);\r\n      setRepoList(data);\r\n    } catch (err) {\r\n      onErrorMessage(\"something wents Wrong\");\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    fetchRepoList(repoUrl.repos_url);\r\n  }, [repoUrl]);\r\n  return (\r\n    <div>\r\n      <List\r\n        size='large'\r\n        bordered\r\n        dataSource={repoList}\r\n        renderItem={(item: any, i: number) => (\r\n          <List.Item>\r\n            {i + 1} ; {item.name}\r\n          </List.Item>\r\n        )}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RepoList;\r\n","import React, { FC, useState, useEffect } from \"react\";\r\nimport \"./Main.scss\";\r\nimport { Layout, Menu, Breadcrumb, Input, Row, Col, Spin, Space } from \"antd\";\r\nimport Axios from \"axios\";\r\nimport BaseLayout from \"../components/BaseLayout/BaseLayout\";\r\nimport { onSuccessMessage, onErrorMessage } from \"../components/BaseLayout/AuthForm\";\r\nimport UserCard from \"../components/UserComponent/UserCard\";\r\nimport RepoList from \"../components/UserComponent/RepoList\";\r\nconst { Search } = Input;\r\n\r\ninterface IState {\r\n  userName: string;\r\n  loading: boolean;\r\n}\r\n\r\nconst Main: FC = () => {\r\n  const [userData, setUserData] = useState<any>(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const fetchUser = async (value: string) => {\r\n    setLoading(true);\r\n    try {\r\n      const { data } = await Axios.get(`https://api.github.com/users/${value}`);\r\n      setUserData(data);\r\n      setLoading(false);\r\n    } catch (err) {\r\n      onErrorMessage(\"user Not able to locate \");\r\n    }\r\n  };\r\n\r\n  console.log(userData);\r\n\r\n  return (\r\n    <BaseLayout>\r\n      <div className='github-page'>\r\n        <div className='search-wrapper'>\r\n          <Search placeholder='type your github username' size='large' onSearch={fetchUser} enterButton='Search' />\r\n        </div>\r\n        <div className='user-wrapper'>\r\n          {loading ? (\r\n            <Space size='middle'>\r\n              <Spin size='large' />\r\n            </Space>\r\n          ) : (\r\n            <div></div>\r\n          )}\r\n          {userData ? (\r\n            <Row>\r\n              <Col span={8}>\r\n                <h3>User Profile</h3>\r\n                <UserCard user={userData} />\r\n              </Col>\r\n              <Col span={16}>\r\n                <h3>Repo List</h3>\r\n                <RepoList repoUrl={userData} />\r\n              </Col>\r\n            </Row>\r\n          ) : (\r\n            <div></div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </BaseLayout>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport PrivateRoute from \"../components/auth/PrivateRoute\";\r\nimport SignIn from \"../pages/SignIn/SignIn\";\r\nimport SignUp from \"../pages/SignUp/SignUp\";\r\nimport Main from \"../pages/Main\";\r\nimport { userContext } from \"../Context/Context\";\r\nimport firebaseConfig from \"../config/firebaseConfig\";\r\n// fireBase\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport { isAuthenticate } from \"../components/auth\";\r\n\r\n// initialise firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nconst Routes = () => {\r\n  const [user, setUser] = useState(isAuthenticate());\r\n\r\n  return (\r\n    <Router>\r\n      <userContext.Provider value={{ user, setUser }}>\r\n        <Switch>\r\n          <Route exact path='/signup' component={SignUp} />\r\n          <Route exact path='/signin' component={SignIn} />\r\n          <PrivateRoute exact path='/' component={Main} />\r\n        </Switch>\r\n      </userContext.Provider>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default Routes;\r\n","export default {\r\n  apiKey: \"AIzaSyA26AHHNsf2yzwG_lIKLm9oXOpUsZhu9WE\",\r\n  authDomain: \"githubapi-dba95.firebaseapp.com\",\r\n  databaseURL: \"https://githubapi-dba95.firebaseio.com\",\r\n  projectId: \"githubapi-dba95\",\r\n  storageBucket: \"githubapi-dba95.appspot.com\",\r\n  messagingSenderId: \"31521074413\",\r\n  appId: \"1:31521074413:web:1b6e35e8f15d455c0870e4\",\r\n  measurementId: \"G-6V0SDNSRS8\",\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Routes from \"./Routes/Routes\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Routes />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}